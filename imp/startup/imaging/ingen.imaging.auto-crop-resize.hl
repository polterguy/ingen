
/*
 * Resizes an image, and automatically crops it if necessary, according to specified
 * [size] argument.
 *
 * Pass in image to resize as [_arg], and destination file as [destination].
 * Pass in expected new size of image after resizing as [size], with [width] and [height]
 * being integer values.
 *
 * Support image types are png and jpg/jpeg.
 *
 * Will return path to file containing resized image.
 * If no resizing is necessary, the returned value will match the [_arg] value specified by caller.
 */
create-event:ingen.imaging.auto-crop-resize

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    _arg:string
    destination:string
    size
      width:int
      height:int

  /*
   * Sanity checking image size, which must be at least 800x600 pixels.
   */
  p5.imaging.get-size:x:/../*/_arg?value
  if:x:/@p5.imaging.get-size/*/*/width?value.int
    <:int:800
    or:x:/@p5.imaging.get-size/*/*/height?value.int
      <:int:600
    throw:Image is too small, it must be at least 800x600 pixels.

  /*
   * Sanity checking image type.
   */
  split:x:/../*/_arg?value
    =:.
  switch:x:/-/0/-?name
    case:jpg
    case:jpeg
    case:png
      .foo
    default
      throw:{0} image types are not supported, only jpg, jpeg, and png images are supported.
        :x:/@split/0/-?name

  /*
   * Retrieving original size of image.
   */
  p5.imaging.get-size:x:/../*/_arg?value

  /*
   * Checking if [size] does not match image actual size, and if so, making sure we resize image.
   */
  if:x:/../*/size/*/width?value.int
    !=:/@p5.imaging.get-size/*/*/width?value.int
    or:x:/../*/size/*/height?value.int
      !=:@/p5.imaging.get-size/*/*/height?value.int

    /*
     * Image does not match the size expected by caller.
     * Hence, we need to resize the image, and returned the resized version.
     * The next variables becomes the "source rectangle" for our image resizing operation,
     * which differs according to how we should clip image, if we need to clip at all that is.
     * If no clipping should occur, the next variables will be the same as the size of the
     * original image.
     */
    _top
    _height
    _width
    _left

    /*
     * First we need to figure out ratios of width and height of image.
     */
    /:x:/@p5.imaging.get-size/*/*/width?value.double
      _:x:/../*/size/*/width?value
    /:x:/@p5.imaging.get-size/*/*/height?value.double
      _:x:/../*/size/*/height?value

    /*
     * Now figuring out the lowest ratio of the above two calculated ratios, which we will
     * use for resizing image.
     */
    if:x:/-2?value
      >:x:/./-?value

      /*
       * The ratio between the image's actual width and its new width, was larger than the
       * ratio between the image's actual height and its new height.
       *
       * Hence we will have to "clip" the image to its left and right, while keeping everything
       * in the height dimension.
       */
      *:x:/../*/size/*/width?value.double
        _:x:/././-?value
      -:x:/@p5.imaging.get-size/*/*/width?value
        _:x:/./-?value.int
      /:x:/-?value
        _:int:2

      /*
       * Now we have our entire source rectangle, and hence we can set its values.
       */
      set:x:/@_left?value
        src:x:/./-?value
      set:x:/@_top?value
        src:int:0
      set:x:/@_height?value
        src:x:/@p5.imaging.get-size/*/*/height?value
      set:x:/@_width?value
        src:x:/./-6?value.int

    else-if:x:/-3?value
      <:x:/./-2?value

      /*
       * The ratio between the image's actual height and its new height, was larger than
       * the ratio between the image's actual width and its new width.
       *
       * Hence we will have to "clip" the image to its top and bottom, while keeping everything
       * in the width dimension.
       */
      *:x:/../*/size/*/height?value.double
        _:x:/././-3?value
      -:x:/@p5.imaging.get-size/*/*/height?value
        _:x:/./-?value.int
      /:x:/-?value
        _:int:2

      /*
       * Now we have our entire source rectangle, and hence we can set its values.
       */
      set:x:/@_top?value
        src:x:/./-?value
      set:x:/@_left?value
        src:int:0
      set:x:/@_width?value
        src:x:/@p5.imaging.get-size/*/*/width?value
      set:x:/@_height?value
        src:x:/./-6?value.int

    else

      /*
       * Image has perfect ratio, it is simply too big (or small), hence using entire image
       * as "source rectangle", without clipping it.
       */
      set:x:/@_top?value
        src:int:0
      set:x:/@_left?value
        src:int:0
      set:x:/@_width?value
        src:x:/@p5.imaging.get-size/*/*/width?value
      set:x:/@_height?value
        src:x:/@p5.imaging.get-size/*/*/height?value

    /*
     * Now we have our source rectangle, and hence can resize our image.
     */
    p5.imaging.resize:x:/../*/_arg?value
      destination:x:/../*/destination?value
      dest-width:x:/../*/size/*/width?value
      dest-height:x:/../*/size/*/height?value
      src-rect
        left:x:/@_left?value
        top:x:/@_top?value
        width:x:/@_width?value
        height:x:/@_height?value

    /*
     * Returning [destination] to caller.
     */
    return:x:/../*/destination?value

  /*
   * No need to resize at all, returning image existing filename.
   */
  return:x:/../*/_arg?value