/*
 * Creates our "view exhibits" front end widget.
 */


/*
 * Verifying access.
 */
p5.auth.has-access:true
  filter:ingen.module
  path:/frontend/exhibits/
if:x:/-?value
  =:bool:false

  /*
   * Oops, access denied!
   */
  throw:Access denied!


/*
 * Checking if "view exhibit" widget already exists, at which point we simply
 * return early.
 */
if
  fetch:x:/0/0?value
    widget-exists:view-exhibits-wrapper

  /*
   * Widget is already visible.
   */
  return


/*
 * Clearing previously create widgets from dynamic content wrapper widget.
 */
clear-widget:themepark-dynamic-content


/*
 * Setting header and title of page.
 */
themepark.header.set:Exhibits


/*
 * Verifying access to ticket module, and if access is not granted, we
 * make sure we remove the pricing columns of the datagrid.
 *
 * This make it easy to create a system where there are no tickets requirements, to only
 * let the guests view the exhibits, and take the tours, etc.
 */
p5.auth.has-access:true
  filter:ingen.module
  path:/frontend/tickets/
if:x:/-?value
  =:bool:false
  or
    ingen.settings.has-ticket-module
    =:bool:false

  /*
   * Removing every trace related to pricing of exhibits from our datagrid.
   */
  set:x:/../*/create-widget/*/widgets/*/micro.widgets.mysql.datagrid/=view-exhibits-datagrid/*/columns/*/price
  set:x:/../*/create-widget/*/widgets/*/micro.widgets.mysql.datagrid/=view-exhibits-datagrid/*/columns/*/children_price


/*
 * Creating our "view exhibit" datagrid in a "bg" wrapper div.
 */
create-widget:view-exhibits-wrapper
  parent:themepark-dynamic-content
  class:shaded rounded air air-inner bg
  widgets

    /*
     * This is the "exhibit filter" wrapper widget.
     */
    div
      class:strip fill themepark-large-strip
      widgets
        input:exhibits-filter
          type:text
          placeholder:Search ...
          onkeydown:@"if (event.keyCode == 13) {p5.$('exhibits-filter-button').raise('onclick');return false;}"
        button:exhibits-filter-button
          class:large
          innerValue:@"<span style=""font-size:1.3rem;"" class=""icon-search""></span>"
          onclick

            /*
             * Databinding exhibits.
             */
            themepark.exhibits.databind

            /*
             * Setting focus to filter textbox again, to make it easily removed.
             */
            micro.page.set-focus:exhibits-filter

    /*
     * Our actual datagrid, dynamically databound towards "exhibits" table.
     */
    micro.widgets.mysql.datagrid:view-exhibits-datagrid
      class:hover themepark-datagrid
      database:ingen
      databind:bool:false
      oninit

        /*
         * Initially databinding exhibits.
         */
        themepark.exhibits.databind

      events

        /*
         * Databinds exhibits.
         */
        themepark.exhibits.databind

          /*
           * Checking if we have a filter.
           */
          get-widget-property:exhibits-filter
            value
          if:x:/@get-widget-property/*/*?value

            /*
             * Adding filter to databind invocation.
             */
            add:x:/../*/micro.widgets.mysql.datagrid.databind
              src
                filter:name like @name
            eval-x:x:/+/*/*
            add:x:/../*/micro.widgets.mysql.datagrid.databind/*/filter
              src
                @name:%{0}%
                  :x:/@get-widget-property/*/*?value

          /*
           * Databinding exhibits grid.
           */
          micro.widgets.mysql.datagrid.databind:view-exhibits-datagrid

      table:exhibits
      .row
        onclick

          /*
           * Evaluating file responsible for displaying information for exhibit,
           * and allowing user to purchase ticket(s) to exhibit.
           */
          eval-x:x:/+/*
          micro.evaluate.file:@INGEN/imp/frontend/exhibits/ui/view-single-exhibit.hl
            id:x:/../*/.row/*/id?value

      columns
        id
          visible:bool:false
        Name
        price
          visible:bool:false
        price
          style:"width:5px;"
          .lambda
            eval-x:x:/+/*/*
            return
              span
                innerValue:€{0}
                  :x:/../*/row/*/price?value
          .header
            innerValue:Adults
        children_price
          visible:bool:false
        children_price
          style:"width:5px;"
          .lambda
            eval-x:x:/+/*/*
            return
              span
                innerValue:€{0}
                  :x:/../*/row/*/children_price?value
          .header
            innerValue:Children

    /*
     * This is where we display exhibits as the user selects an exhibit to view it.
     */
    container:exhibits-display-single-exhibit
