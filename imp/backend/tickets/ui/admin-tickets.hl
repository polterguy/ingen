/*
 * Creates our "admin tickets" back end widget.
 */


/*
 * Verifying access.
 */
ingen.access._throw-if-no-access:false
  path:/backend/tickets/


/*
 * Checking if "manage exhibit" widget already exists, at which point we simply
 * return early.
 */
if
  fetch:x:/0/0?value
    widget-exists:manage-tickets-wrapper

  /*
   * Widget is already visible.
   */
  return


/*
 * Clearing previously create widgets from dynamic content wrapper widget.
 */
ingen.main-viewport.clear


/*
 * Setting header and title of page.
 */
ingen.header.set:Administrate tickets


/*
 * Creating our "manage tickets" datagrid in a "bg" wrapper div.
 */
create-widget:manage-tickets-wrapper
  parent:themepark-dynamic-content
  class:shaded rounded air air-inner bg
  events

    /*
     * Invoked when datagrid for some reasons is supposed to be re-databound.
     */
    ingen.tickets.re-databind

      /*
       * Checking if operators has filtered according to exhibits.
       */
      .exhibit-filter
      get-widget-property:manage-tickets-exhibit-filter
        value
      if:x:/@get-widget-property/*/*?value
        !=:_default

        /*
         * Adding exhibit filtering condition.
         */
        set:x:/@.exhibit-filter?value
          src:and exhibit_id = @exhibit_id
        eval-x:x:/+/*/*
        add:x:/../*/micro.widgets.mysql.datagrid.databind/*/filter
          src
            @exhibit_id:x:/@get-widget-property/*/*?value.long

      /*
       * Checking if operator has filtered with some text input.
       */
      .custom-filter
      get-widget-property:tickets-custom-filter
        value
      if:x:/@get-widget-property/*/*?value
        !=:

        /*
         * Adding additional free text filtering condition.
         */
        set:x:/@.custom-filter?value
          src:and (purchaser_name like @custom or purchaser_email like @custom)
        eval-x:x:/+/*/*
        add:x:/../*/micro.widgets.mysql.datagrid.databind/*/filter
          src
            @custom:%{0}%
              :x:/@get-widget-property/*/*?value

      /*
       * Figuring out if we should only return used tickets, or vice versa.
       */
      _used:int:0
      get-widget-property:used-tickets
        checked
      if:x:/-/*/*
        set:x:/@_used?value
          src:int:1

      /*
       * Databinding tickets grid.
       *
       * Notice, we databind it such that we display the oldest tickets at the top, since it
       * is likely that the oldest tickets are the first ones to reach the entrance to the exhibit.
       */
      eval-x:x:/+/*/filter
      micro.widgets.mysql.datagrid.databind:manage-tickets-datagrid
        order-by:purchased
        order-dir:desc
        filter:exists (select * from tickets where used = {2} and tickets.tickets_collection_id = tickets_collection.id) {0} {1}
          :x:/@.exhibit-filter?value
          :x:/@.custom-filter?value
          :x:/@_used?value

  widgets

    /*
     * This is the "exhibit filter" wrapper widget.
     *
     * We allow for filtering according to whether or not tickets have been used,
     * what exhibits they are for, in addition to a free text filter supplied by the operator,
     * to allow for easily searching for tickets matching e.g. an email address or a name.
     *
     * Notice, we haven't implemented paging here, since when an operator is to take a guest's
     * tickets, it's faster and more convenient to simply search. Feel free to look at how we
     * implemented paging in "exhibits" if you want to add paging here.
     */
    div
      class:strip fill themepark-large-strip
      widgets

        /*
         * "Used" checkbox filter.
         */
        label
          widgets
            span
              innerValue:Used
            input:used-tickets
              style:"font-size:1.3rem;"
              type:checkbox
              onchange

                /*
                 * Re-databinding datagrid.
                 */
                ingen.tickets.re-databind

        /*
         * "Exhibit name" select dropdown filter.
         */
        container:manage-tickets-exhibit-filter
          element:select
          oninit

            /*
             * Poulating select dropdown with all exhibits, and adding a "no filter"
             * option at the top.
             */
            create-widget
              parent:x:/../*/_event?value
              element:option
              innerValue:Filter exhibits ...
              value:_default

            /*
             * Retrieving all exhibits.
             */
            ingen.exhibits.get
            for-each:x:/-/*/exhibit
              create-widget
                parent:x:/../*/_event?value
                element:option
                innerValue:x:/@_dp/#/*/name?value
                value:x:/@_dp/#/*/id?value

          onchange

            /*
             * Re-databinding datagrid.
             */
            ingen.tickets.re-databind

        /*
         * "Custom filter" textbox filter, and its button.
         *
         * Notice, all other filters are automatically re-databinding the grid when the operator is
         * interacting with the ([onchange] Ajax event).
         */
        input:tickets-custom-filter
          type:text
          placeholder:Filter ...
          onkeydown:@"if (event.keyCode == 13) {p5.$('tickets-filter-button').raise('onclick');return false;}"
        button:tickets-filter-button
          innerValue:@"<span style=""font-size:1.3rem;"" class=""icon-search""></span>"
          onclick

            /*
             * Re-databinding tickets.
             */
            ingen.tickets.re-databind

            /*
             * Setting focus to filter textbox again, to make it easily removed.
             */
            micro.page.set-focus:tickets-custom-filter

    /*
     * Our actual datagrid, dynamically databound towards "tickets_collection" table.
     */
    micro.widgets.mysql.datagrid:manage-tickets-datagrid
      class:hover themepark-datagrid
      database:ingen
      table:tickets_collection

      /*
       * Avoiding databinding to use the same filtering logic in all databind invocations.
       */
      databind:bool:false
      oninit

        /*
         * Invoking event responsible for databinding grid.
         */
        ingen.tickets.re-databind

      .row
        onclick

          /*
           * Checking if ticket is used.
           */
          get-widget-property:used-tickets
            checked
          if:x:/-/*/*

            /*
             * User can't edit tickets that are already used.
             */
            micro.windows.info:You can't edit tickets that are already used
              class:micro-windows-info warning
            return

          /*
           * Invoking file responsible for displaying and editing a specific
           * tickets_collection item from database.
           */
          eval-x:x:/+/*
          micro.evaluate.file:@INGEN/imp/backend/tickets/ui/view-tickets.hl
            id:x:/../*/.row/*/id?value

      columns
        id
          visible:bool:false
        purchaser_name
          .header
            innerValue:Name
        purchaser_email
          .header
            innerValue:Email
        purchased
          visible:bool:false
        Purchased
          .lambda
            p5.types.date.format:x:/../*/row/*/purchased?value
              format:"dddd dd. MMMM yyyy - HH:mm"
            eval-x:x:/+/*/*
            return
              span
                innerValue:x:/@p5.types.date.format?value
