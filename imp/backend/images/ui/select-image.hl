/*
 * Creates a modal window allowing the user to either upload an image, or use an existing image,
 * and invokes **[.onok]** with the **[path]** to the image if user selects an image.
 */


/*
 * Sanity checking invocation.
 */
micro.lambda.contract.min:x:/..
  .onok


/*
 * Adding callback to "elect image" event.
 */
add:x:/../*/create-widgets/**/events/*/themepark.images.select/*/.onok
  src:x:/../*/.onok/*


/*
 * Creates our modal widget.
 */
create-widgets
  micro.widgets.modal:select-image-modal-widget
    widgets
      h2
        innerValue:Select image
      p
        innerValue:@"Notice, your uploaded images will be automatically clipped and resized to a 4/3 ratio of 800x600 pixels (large), 400x300 (small) and 160x120 pixels (thumbnails)."
      container
        class:air-bottom
        oninit

          /*
           * Initially databinding thumbnails.
           */
          themepark.images.databind

        events

          /*
           * Databinds each image and displays in widget, such that use can select one.
           */
          themepark.images.databind

            /*
             * Clearing out all old thumbnails from widget.
             */
            clear-widget:x:/../*/_event?value

            /*
             * Listing all thumbnails in the system.
             */
            micro.evaluate.file:@INGEN/imp/backend/images/model/get-thumbnails.hl

            /*
             * Looping through each image listed above, and creates one select image widget for each.
             */
            for-each:x:/@micro.evaluate.file/*?name

              /*
               * Creating select image widget.
               */
              eval-x:x:/+/**/.path
              create-widget
                parent:x:/../*/_event?value
                element:img
                role:button
                class:themepark-thumbnail-image jumbo-button
                alt:Thumbnail of image
                src:x:/@_dp?value
                onclick

                  /*
                   * Forward evaluated during creation.
                   */
                  .path:x:/@_dp?value

                  /*
                   * Assuming file has exact same name, except that it's not in the "/thumbs/" folder.
                   */
                  replace:x:/@.path?value
                    src:/thumbs
                  themepark.images.select:x:/@replace?value

          /*
           * Invoked when user selects an image.
           */
          themepark.images.select

            /*
             * Contains callback supplied by caller.
             */
            .onok

            /*
             * Checking if size preferences is anything but "large", at which point we
             * append the appropriate folder to the filename.
             */
            themepark.images.get-size-used
            if:x:/@themepark.images.get-size-used?value
              !=:large

              /*
               * Splitting path, and appending the size as a folder.
               */
              split:x:/../*/_arg?value
                =:/
              insert-before:x:/@split/0/-
                src:x:/@themepark.images.get-size-used?value
              join:x:/@split/*?name
                sep:/
              set:x:/../*/_arg?value
                src:x:/@join?value

            /*
             * Making sure we figure out float to use for image.
             */
            themepark.images.get-float

            /*
             * Evaluates callback, to do whatever user wants us todo when an image is selected.
             */
            eval-x:x:/+/*
            eval:x:/@.onok
              path:x:/../*/_arg?value
              float:x:/@themepark.images.get-float?value

            /*
             * Deletes the modal widget.
             */
            delete-widget:select-image-modal-widget

      div
        class:strip right
        widgets
          micro.widgets.upload-button
            class:large
            multiple
            accept:.png,.jpg,.jpeg
            .onupload

              /*
               * Looping through each image and invoking file responsible for saving image.
               */
              for-each:x:/../*/files/*?value
                eval-x:x:/+/*
                micro.evaluate.file:@INGEN/imp/backend/images/model/save-image.hl
                  image:x:/@_dp?value

              /*
               * Re-databinding thumbnails.
               */
              themepark.images.databind

          button
            innerValue:Close
            onclick

              /*
               * Simply deletes the modal widget.
               */
              delete-widget:select-image-modal-widget

      div:themepark-select-size-buttons
        class:strip right
        oninit

          /*
           * Figuring out if user has previously selected a size.
           */
          p5.web.session.get:themepark.images.set-size-used
          if:x:/@p5.web.session.get/*?value

            /*
             * User has previously selected a size to use.
             */
            themepark.images.set-size-used:x:/@p5.web.session.get/*?value

          else

            /*
             * Defaulting to using large size.
             */
            themepark.images.set-size-used:large

        events

          /*
           * Changes the size used during selection of image.
           */
          themepark.images.set-size-used

            /*
             * Simply storing in session the user preferences to which image to use.
             */
            p5.web.session.set:themepark.images.set-size-used
              src:x:/../*/_arg?value

            /*
             * Un-toggling all buttons, for the to toggle currently clicked button.
             */
            p5.web.widgets.find-first-like:themepark-select-size-buttons
              class:toggled
            micro.css.delete:x:/-/*/*?value
              class:toggled
            p5.web.widgets.find-first:themepark-select-size-buttons
              .size:x:/../*/_arg?value
            micro.css.add:x:/-/*/*?value
              class:toggled

          /*
           * Retrieves the size used during selection of image.
           */
          themepark.images.get-size-used

            /*
             * Retrieves the size preferences for user from session.
             */
            p5.web.session.get:themepark.images.set-size-used
            return:x:/-/*?value

        widgets
          button
            innerValue:Large
            .size:large
            onclick

              /*
               * Changing size used during selection.
               */
              themepark.images.set-size-used:large

          button
            innerValue:Medium
            .size:medium
            onclick

              /*
               * Changing size used during selection.
               */
              themepark.images.set-size-used:medium

          button
            innerValue:Thumbnail
            .size:thumbs
            onclick

              /*
               * Changing size used during selection.
               */
              themepark.images.set-size-used:thumbs

      div:themepark-select-float-buttons
        class:strip right
        oninit

          /*
           * Figuring out if user has previously selected a float.
           */
          p5.web.session.get:themepark.images.set-float
          if:x:/@p5.web.session.get/*?value

            /*
             * User has previously selected a size to use.
             */
            themepark.images.set-float:x:/@p5.web.session.get/*?value

          else

            /*
             * Defaulting to using no floats.
             */
            themepark.images.set-float:none

        events

          /*
           * Changes the float used during selection of image.
           */
          themepark.images.set-float

            /*
             * Simply storing in session the user preferences to which image to use.
             */
            p5.web.session.set:themepark.images.set-float
              src:x:/../*/_arg?value

            /*
             * Un-toggling all buttons, for the to toggle currently clicked button.
             */
            p5.web.widgets.find-first-like:themepark-select-float-buttons
              class:toggled
            micro.css.delete:x:/-/*/*?value
              class:toggled
            p5.web.widgets.find-first:themepark-select-float-buttons
              .float:x:/../*/_arg?value
            micro.css.add:x:/-/*/*?value
              class:toggled

          /*
           * Retrieves the size used during selection of image.
           */
          themepark.images.get-float

            /*
             * Retrieves the size preferences for user from session.
             */
            p5.web.session.get:themepark.images.set-float
            return:x:/-/*?value

        widgets
          button
            innerValue:@"<span class=""icon-paragraph-left""></span>"
            .float:left
            title:Floats the image to the left of your text
            onclick

              /*
               * Changing float used during selection.
               */
              themepark.images.set-float:left

          button
            innerValue:@"<span class=""icon-paragraph-center""></span>"
            .float:none
            title:Display the image such that text comes above and below the image.
            onclick

              /*
               * Changing float used during selection.
               */
              themepark.images.set-float:none

          button
            innerValue:@"<span class=""icon-paragraph-right""></span>"
            .float:right
            title:Floats the image to the right of your text
            onclick

              /*
               * Changing float used during selection.
               */
              themepark.images.set-float:right
