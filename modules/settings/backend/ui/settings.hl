/*
 * Creates our "admin settings" backend widget.
 */


/*
 * Verifying access.
 */
ingen.access._throw-if-no-access:false
  path:/settings/backend/


/*
 * Clearing previously create widgets from dynamic content wrapper widget.
 */
ingen.main-viewport.clear


/*
 * Retrieving all plugins for settings module.
 */
vocabulary:~ingen.settings.plugins.
for-each:x:/-/*?value
  set:x:/+?name
    src:x:/@_dp?value
  foo
  insert-before:x:/../*/create-widgets/*/*/0/-
    src:x:/./-/*


/*
 * Creating our main widget for allowing admin to modify settings of app.
 */
create-widgets
  micro.widgets.modal:ingen-settings-modal
    widgets

      /*
       * Descriptive header.
       */
      h2
        innerValue:Settings

      /*
       * Button strip to save or close modal widget.
       */
      div
        class:strip right
        widgets

          /*
           * Save settings button
           */
          button
            innerValue:Save
            onclick

              /*
               * Serialising form.
               */
              micro.form.serialize:ingen-settings-modal

              /*
               * Looping through each setting from above and updating value in database.
               *
               * Notice, this allows us to create new settings without modifying our logic here,
               * since what to store to the database is dynamically determined according to what's
               * returned from our above invocation to [micro.form.serialize].
               */
              for-each:x:/@micro.form.serialize/*

                /*
                 * Deleting old value.
                 */
                delete-data:x:/*/*/{0}
                  :x:/@_dp/#?name

                /*
                 * Inserting new value.
                 */
                set:x:/+2/*?name
                  src:x:/@_dp/#?name
                eval-x:x:/+/*/*
                insert-data
                  foo
                    value:x:/@_dp/#?value

              /*
               * Deleting modal window and providing feedback to caller.
               *
               * Notice, since we reload location when settings are stored, we'll
               * have to use the [desktop.evaluate.on-next-pageload] Active Event to
               * make it possible to supply feedback to user.
               */
              delete-widget:ingen-settings-modal
              desktop.evaluate.on-next-pageload
                lambda
                  micro.windows.info:Settings was updated
                    class:micro-windows-info success

              /*
               * Since some parts of the app might have settings that affects its initial rendering
               * on the page, we do a location reload thing here.
               */
              p5.web.reload-location

          /*
           * Close settings button
           */
          button
            innerValue:Close
            onclick

              /*
               * Simply deleting modal window, and making sure we remove toggled state from Jumbo Button.
               */
              delete-widget:ingen-settings-modal
              ingen.jumbo-buttons._toggle
