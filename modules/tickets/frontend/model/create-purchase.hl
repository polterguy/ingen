/*
 * Inserts a purchase into database.
 */


/*
 * Sanity checking invocation.
 */
micro.lambda.contract.min:x:/..
  purchaser_name:string
  purchaser_email:string
  subscribe:bool
  no_adults:int
  no_children:int
  exhibit-id:long


/*
 * Checking if our "ticket cache" folder exists, and if not, making sure we create it.
 */
if
  fetch:x:/0/0?value
    folder-exists:/common/private/ingen-tickets/
  not
  create-folder:/common/private/ingen-tickets/


/*
 * This is our "ticket reference", and is used as a unique reference to easily identify tickets,
 * without allowing for faking the system.
 */
p5.types.guid.new
.ticket-id
split:x:/@p5.types.guid.new?value.string
  =:-
set:x:/@.ticket-id?value
  src:x:/@split/0?name


/*
 * Opening up database connection and doing insert into relevant tables.
 */
p5.mysql.connect:[ingen]

  /*
   * Creating a database transaction.
   */
  p5.mysql.transaction.begin

    /*
     * Checking if customer wants to subscribe, and if so, creating a subscribers record,
     * unless we already have user's email address from before.
     */
    if:x:/../*/subscribe?value
      =:bool:true

      /*
       * Caller wants to subscribe to newsletter, now checking if we have him in the
       * system from before.
       */
      p5.mysql.scalar:select count(*) from subscribers where email = @email
        @email:x:/../*/purchaser_email?value
      if:x:/@p5.mysql.scalar?value.int
        =:int:0

        /*
         * Email address does not exist in the system from before.
         */
        p5.mysql.insert:insert into subscribers (name, email) values (@name, @email)
          @name:x:/../*/purchaser_name?value
          @email:x:/../*/purchaser_email?value

    /*
     * Creating our tickets_collection record, making sure we insert our GUID
     * as its "tickets_collection_guid" value.
     */
    p5.mysql.insert:insert into tickets_collection (purchaser_name, purchaser_email, exhibit_id, tickets_collection_guid) values (@purchaser_name, @purchaser_email, @exhibit_id, @tickets_collection_guid)
      @purchaser_name:x:/../*/purchaser_name?value
      @purchaser_email:x:/../*/purchaser_email?value
      @exhibit_id:x:/../*/exhibit-id?value.long
      @tickets_collection_guid:x:/@.ticket-id?value

    /*
     * Creating our adult tickets records.
     */
    eval-x:x:/+
    .no:x:/../*/no_adults?value.int
    while:x:/@.no?value
      !=:int:0

      /*
       * Inserting one adult tickets record.
       */
      p5.mysql.insert:insert into tickets (is_child, used, tickets_collection_id) values (0, 0, @tickets_collection_id)
        @tickets_collection_id:x:/..while/@p5.mysql.insert/*/id?value.long

      /*
       * Decrementing [.no]
       */
      set:x:/@.no?value
        -:x:/@.no?value
          _:1

    /*
     * Creating our adult tickets records.
     */
    eval-x:x:/+
    .no:x:/../*/no_children?value.int
    while:x:/@.no?value
      !=:int:0

      /*
       * Inserting one adult tickets record.
       */
      p5.mysql.insert:insert into tickets (is_child, used, tickets_collection_id) values (1, 0, @tickets_collection_id)
        @tickets_collection_id:x:/..while/@p5.mysql.insert/*/id?value.long

      /*
       * Decrementing [.no]
       */
      set:x:/@.no?value
        -:x:/@.no?value
          _:1

    /*
     * Committing database transaction.
     */
    p5.mysql.transaction.commit


/*
 * Trying to send purchaser an email, but only if we have an actual username for our SMTP settings,
 * since otherwise SMTP settings probably haven't been configured.
 */
ingen.settings.get-smtp-settings
if:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-username?value
  =:your-username@gmail.com

  /*
   * Creating warning that SMTP settings have notbeen configured.
   */
  micro.windows.info:SMTP settings of app is not configured
    class:micro-windows-info warning

else

  /*
   * Customizing the body of the email according to settings and ticket reference.
   *
   * Notice, we could have used a [fork] (multiple threads) here, but to keep the system
   * simple, and avoid complexity, we've chosen to keep it simple.
   */
  eval-x:x:/+
  .body:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-body?value
  set:x:/@.body?value
    replace:x:/@.body?value
      src:[ticket-reference]
      dest:x:/@.ticket-id?value

  /*
   * Creating QR code for ticket, and downloading it locally, to attach it as an image
   * attachment to email sent to user. Notice, we simply use Google's QR code API for this.
   */
  eval-x:x:/+/*/*/*/.p5.io.file.save-to-stream
  p5.http.get:"https://chart.googleapis.com/chart?cht=qr&chl={0}&chs=250x250&chld=L|0"
    :x:/@.ticket-id?value
    .onresponse
      .p5.io.file.save-to-stream:/common/private/ingen-tickets/{0}.png
        :x:/@.ticket-id?value

  /*
   * Sending user an email.
   */
  set:x:/+2/*/*/Sender/*?name
    src:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-name?value
  set:x:/+/*/*/To/*?name
    src:x:/../*/purchaser_name?value
  p5.smtp.send
    server:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-server?value
    port:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-port?value
    ssl:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-use-ssl?value
    username:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-username?value
    password:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-password?value
    envelope
      Subject:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-subject?value
      Sender
        foo:x:/@ingen.settings.get-smtp-settings/*/ingen.settings.smtp-sender?value
      To
        foo:x:/../*/purchaser_email?value
      body
        multipart:mixed
          text:plain
            content:x:/@.body?value
          image:png
            filename:/common/private/ingen-tickets/{0}.png
              :x:/@.ticket-id?value


/*
 * Returning tickets_collection_guid to caller.
 */
return:x:/@.ticket-id?value
